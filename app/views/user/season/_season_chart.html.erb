<script type="text/javascript">
  $(function () {
    $('#season-chart').highcharts({
      chart: {
        type: 'column',
        height: 550,
        animation: true
      },
      title: { text: null },
      legend: {
        enabled: false
      },
      xAxis: {
        type: 'category',
        title: { text: null }
      },
      yAxis: {
        title: { text: null }
      },
      series: [{
        name: 'Average',
        colorByPoint: true,
        data: null
      }],
    });
  });

  <!-- DYNAMIC CHART -->
  $('#create-season-chart').on('click', function() {
    updateChart();
  })

  $('#y-axis').on('change', function() {
    updateChart();
  })

  function updateChart(){
    var $chart = $('#season-chart').highcharts()
    var minDistance = parseInt($('#minimum_distance').val());
    var maxDistance = parseInt($('#maximum_distance').val());

    var range = minDistance.toString() + ' - ' + maxDistance.toString() + ' mile ';
    var yAxisSelection = $('#y-axis').val();

    $chart.setTitle({ text: 'Season vs. ' + yAxisSelection + ' for ' + range + 'runs' });

    var yAxisUnits = {
      "Average Total Time": " (min)",
      "Average Speed": " (mph)"
    };

    $chart.yAxis[0].setTitle({ text: yAxisSelection + yAxisUnits[yAxisSelection] });

    var data = {
      "Average Total Time": <%= @workouts.distance_season_and_total_time.to_json.html_safe %>,
      "Average Speed": <%= @workouts.distance_season_and_average_speed.to_json.html_safe %>
    };

    var workoutsBySeason = data[yAxisSelection];

    plotData = getPlotData(workoutsBySeason, minDistance, maxDistance);

    $chart.series[0].setData(plotData);
    $chart.series[0].update({
      animation: {
        duration: 250
      }
    });
  }

  function getPlotData(workoutsBySeason, minDistance, maxDistance) {
    var plotData = [];

    for (var season in workoutsBySeason) {
      plotData.push({
        name: season,
        y: averageTotalTimeOrSpeed(workoutsBySeason[season], minDistance, maxDistance)
      })
    }

    plotData.sort(compare);

    return removeZeroes(plotData);
  }

  function removeZeroes(data) {
    for(var i = 0; i < data.length; i++) {
      if(data[i].y == 0) {
        data.splice(i, data.length);
        break
      }
    }

    return data;
  }

  function averageTotalTimeOrSpeed(dataset, minDistance, maxDistance) {
    var filtered = [];

    dataset.forEach(function(set){
      if (set[0] >= minDistance && set[0] <= maxDistance) {
        filtered.push(set[1]);
      }
    })

    if (filtered[0] == undefined) {
      return 0;
    } else {
      return calculateAverage(filtered);
    }
  }

  function calculateAverage(array) {
    var total = 0;
    for (var i = 0; i < array.length; i++) {
      total += array[i];
    }
    var avg = total / array.length;

    return parseFloat(avg.toFixed(2));
  }

  function compare(a, b) {
    if (a.y > b.y) {
      return -1;
    } else if (a.y < b.y) {
      return 1;
    } else {
      return 0;
    }
  }
</script>
